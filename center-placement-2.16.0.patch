--- metacity-pristine-2.16.0/src/place.c	2006-08-27 16:49:44.000000000 -0500
+++ metacity-2.16.0/src/place.c	2006-12-06 18:01:37.000000000 -0600
@@ -86,154 +86,6 @@
 }
      
 static void
-find_next_cascade (MetaWindow *window,
-                   MetaFrameGeometry *fgeom,
-                   /* visible windows on relevant workspaces */
-                   GList      *windows,
-                   int         x,
-                   int         y,
-                   int        *new_x,
-                   int        *new_y)
-{
-  GList *tmp;
-  GList *sorted;
-  int cascade_x, cascade_y;
-  int x_threshold, y_threshold;
-  int window_width, window_height;
-  int cascade_stage;
-  MetaRectangle work_area;
-  const MetaXineramaScreenInfo* current;
-  
-  sorted = g_list_copy (windows);
-  sorted = g_list_sort (sorted, northwestcmp);
-
-  /* This is a "fuzzy" cascade algorithm. 
-   * For each window in the list, we find where we'd cascade a
-   * new window after it. If a window is already nearly at that
-   * position, we move on.
-   */
-  
-  /* arbitrary-ish threshold, honors user attempts to
-   * manually cascade.
-   */
-#define CASCADE_FUZZ 15
-  if (fgeom)
-    {
-      x_threshold = MAX (fgeom->left_width, CASCADE_FUZZ);
-      y_threshold = MAX (fgeom->top_height, CASCADE_FUZZ);
-    }
-  else
-    {
-      x_threshold = CASCADE_FUZZ;
-      y_threshold = CASCADE_FUZZ;
-    }
-  
-  /* Find furthest-SE origin of all workspaces.
-   * cascade_x, cascade_y are the target position
-   * of NW corner of window frame.
-   */
-
-  current = meta_screen_get_current_xinerama (window->screen);
-  meta_window_get_work_area_for_xinerama (window, current->number, &work_area);
-
-  cascade_x = MAX (0, work_area.x);
-  cascade_y = MAX (0, work_area.y);
-  
-  /* Find first cascade position that's not used. */
-  
-  window_width = window->frame ? window->frame->rect.width : window->rect.width;
-  window_height = window->frame ? window->frame->rect.height : window->rect.height;
-  
-  cascade_stage = 0;
-  tmp = sorted;
-  while (tmp != NULL)
-    {
-      MetaWindow *w;
-      int wx, wy;
-      
-      w = tmp->data;
-
-      /* we want frame position, not window position */
-      if (w->frame)
-        {
-          wx = w->frame->rect.x;
-          wy = w->frame->rect.y;
-        }
-      else
-        {
-          wx = w->rect.x;
-          wy = w->rect.y;
-        }
-      
-      if (ABS (wx - cascade_x) < x_threshold &&
-          ABS (wy - cascade_y) < y_threshold)
-        {
-          /* This window is "in the way", move to next cascade
-           * point. The new window frame should go at the origin
-           * of the client window we're stacking above.
-           */
-          meta_window_get_position (w, &wx, &wy);
-          cascade_x = wx;
-          cascade_y = wy;
-          
-          /* If we go off the screen, start over with a new cascade */
-	  if (((cascade_x + window_width) >
-               (work_area.x + work_area.width)) ||
-              ((cascade_y + window_height) >
-	       (work_area.y + work_area.height)))
-	    {
-	      cascade_x = MAX (0, work_area.x);
-	      cascade_y = MAX (0, work_area.y);
-              
-#define CASCADE_INTERVAL 50 /* space between top-left corners of cascades */
-              cascade_stage += 1;
-	      cascade_x += CASCADE_INTERVAL * cascade_stage;
-              
-	      /* start over with a new cascade translated to the right, unless
-               * we are out of space
-               */
-              if ((cascade_x + window_width) <
-                  (work_area.x + work_area.width))
-                {
-                  tmp = sorted;
-                  continue;
-                }
-              else
-                {
-                  /* All out of space, this cascade_x won't work */
-                  cascade_x = MAX (0, work_area.x);
-                  break;
-                }
-	    }
-        }
-      else
-        {
-          /* Keep searching for a further-down-the-diagonal window. */
-        }
-        
-      tmp = tmp->next;
-    }
-
-  /* cascade_x and cascade_y will match the last window in the list
-   * that was "in the way" (in the approximate cascade diagonal)
-   */
-  
-  g_list_free (sorted);
-
-  /* Convert coords to position of window, not position of frame. */
-  if (fgeom == NULL)
-    {
-      *new_x = cascade_x;
-      *new_y = cascade_y;
-    }
-  else
-    {
-      *new_x = cascade_x + fgeom->left_width;
-      *new_y = cascade_y + fgeom->top_height;
-    }
-}
-
-static void
 find_most_freespace (MetaWindow *window,
                      MetaFrameGeometry *fgeom,
                      /* visible windows on relevant workspaces */
@@ -799,114 +651,26 @@
    * on the sides of the parent window or something.
    */
   
-  if (window->type == META_WINDOW_DIALOG ||
-      window->type == META_WINDOW_MODAL_DIALOG ||
-      window->type == META_WINDOW_SPLASHSCREEN)
-    {
-      /* Center on current xinerama (i.e. on current monitor) */
-      int w, h;
+  /* Center on current xinerama (i.e. on current monitor) */
+  int w, h;
 
-      /* Warning, this function is a round trip! */
-      xi = meta_screen_get_current_xinerama (window->screen);
-
-      w = xi->rect.width;
-      h = xi->rect.height;
+  /* Warning, this function is a round trip! */
+  xi = meta_screen_get_current_xinerama (window->screen);
 
-      x = (w - window->rect.width) / 2;
-      y = (h - window->rect.height) / 2;
+  w = xi->rect.width;
+  h = xi->rect.height;
 
-      x += xi->rect.x;
-      y += xi->rect.y;
-      
-      meta_topic (META_DEBUG_PLACEMENT, "Centered window %s on screen %d xinerama %d\n",
-                  window->desc, window->screen->number, xi->number);
+  x = (w - window->rect.width) / 2;
+  y = (h - window->rect.height) / 2;
 
-      goto done_check_denied_focus;
-    }
+  x += xi->rect.x;
+  y += xi->rect.y;
   
-  /* Find windows that matter (not minimized, on same workspace
-   * as placed window, may be shaded - if shaded we pretend it isn't
-   * for placement purposes)
-   */
-  {
-    GSList *all_windows;
-    GSList *tmp;
-    
-    all_windows = meta_display_list_windows (window->display);
-
-    tmp = all_windows;
-    while (tmp != NULL)
-      {
-        MetaWindow *w = tmp->data;
-
-        if (meta_window_showing_on_its_workspace (w) &&
-            w != window && 
-            (window->workspace == w->workspace ||
-             window->on_all_workspaces || w->on_all_workspaces))
-          windows = g_list_prepend (windows, w);
-
-        tmp = tmp->next;
-      }
+  meta_topic (META_DEBUG_PLACEMENT, "Centered window %s on screen %d xinerama %d\n",
+              window->desc, window->screen->number, xi->number);
 
-    g_slist_free (all_windows);
-  }
-
-  /* Warning, this is a round trip! */
-  xi = meta_screen_get_current_xinerama (window->screen);
+  goto done_check_denied_focus;
   
-  /* "Origin" placement algorithm */
-  x = xi->rect.x;
-  y = xi->rect.y;
-
-  if (find_first_fit (window, fgeom, windows,
-                      xineramas_list, n_xineramas,
-                      x, y, &x, &y))
-    goto done_check_denied_focus;
-
-  /* This is a special-case origin-cascade so that windows that are
-   * too large to fit onto a workspace (and which will be
-   * automaximized later) will go onto an empty xinerama if one is
-   * available.
-   */
-  if (window->has_maximize_func && window->decorated &&
-      !window->fullscreen)
-    {
-      if (window->frame)
-        {
-          x = fgeom->left_width;
-          y = fgeom->top_height;
-        }
-      else
-        {
-          x = 0;
-          y = 0;
-        }
-
-      for (i = 0; i < n_xineramas; i++)
-        {
-          MetaRectangle work_area;
-          
-          meta_window_get_work_area_for_xinerama (window, xineramas_list[i], &work_area);
-          
-          if (!rectangle_overlaps_some_window (&work_area, windows))
-            {
-              x += work_area.x;
-              y += work_area.y;
-              placed_on = i;
-              break;
-            }
-        }
-    }
-
-  /* if the window wasn't placed at the origin of an empty xinerama,
-   * cascade it onto the current xinerama
-   */
-  if (placed_on == -1)
-    {
-      find_next_cascade (window, fgeom, windows, x, y, &x, &y);
-      placed_on = window->screen->last_xinerama_index;
-    }
-
   /* Maximize windows if they are too big for their work area (bit of
    * a hack here). Assume undecorated windows probably don't intend to
    * be maximized.  
